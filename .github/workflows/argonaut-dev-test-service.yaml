
name: "Build and Push to CR"

on:
  push:
    branches:
      - main
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:

jobs:
  build:
    
    environment: 
      name: dev 
    
    runs-on: ubuntu-latest
    name: Build and Push Img
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
      - name: Fetch repo
        uses: actions/checkout@v2
      - name: Get Short SHA
        id: get_sha
        run: echo ::set-output name=SHA_SHORT::$(git rev-parse --short HEAD)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
#       - name: Store secrets
#         run: |
#             echo ${{ secrets }} > /tmp/mysecretfile
      - name: Fetch Secrets from API ðŸ“¦
        uses: JamesIves/fetch-api-data-action@v2.2.2
        with:
          debug: true,
          endpoint: http://localhost:8000/api/v1/app/secrets/get
          # The bearer token here is returned from the TOKEN_ENDPOINT call. The returned data looks like so: {data: {access_token: '123'}}, meaning it can be accessed using the triple bracket syntax.
          configuration: '{ "method": "POST", "body":{"app_name":"test-service","environment":{"name":"dev","id":4,"region":"us-east-2","isSetup":"true"},"cluster_name":"dev"}, "headers": {"Authorization": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImY5NTMxMDgzIn0.eyJzdWIiOiJmZGM1ZTY4NS04NzU5LTQzZTUtODY5Zi01MGExMGM5ZWI0ZWQiLCJuYW1lIjoiVHVzaGFyIFByYWphcGF0aSIsImVtYWlsIjoidHVzaGFyLmRldkBhcmdvbmF1dC5kZXYiLCJlbWFpbF92ZXJpZmllZCI6dHJ1ZSwibWV0YWRhdGEiOnt9LCJyb2xlcyI6W10sInBlcm1pc3Npb25zIjpbXSwidGVuYW50SWQiOiIwNGRkZDNlNS1jNDg4LTQwNGYtYTk2YS0xZTQwYzRmNThhZjEiLCJ0ZW5hbnRJZHMiOlsiMDRkZGQzZTUtYzQ4OC00MDRmLWE5NmEtMWU0MGM0ZjU4YWYxIl0sInByb2ZpbGVQaWN0dXJlVXJsIjoiaHR0cHM6Ly93d3cuZ3JhdmF0YXIuY29tL2F2YXRhci82YjFiZTRiNDY0ZmYyNTg1OGNhNzA0YWQ4NTg0Njk3Mj9kPWh0dHBzOi8vdWktYXZhdGFycy5jb20vYXBpL1R1c2hhcitQcmFqYXBhdGkvMTI4L3JhbmRvbSIsInR5cGUiOiJ1c2VyVG9rZW4iLCJpYXQiOjE2NDY2MzI1NzMsImV4cCI6MTY0NjcxODk3MywiYXVkIjoiZjk1MzEwODMtNzkyNy00YjAwLTg2YzctYWQ1ZGI5OGY2ZGUxIiwiaXNzIjoiaHR0cHM6Ly9hcmdvbmF1dC1wcC5mcm9udGVnZy5jb20ifQ.emmT7iXfZofpiMKJcrIrIi1Tn6Evcu-3of7CVhAe5omV9fjAzzIHAFfPFzJML9fFBRFB6jxT4W7l8t5LMANieYryr3ghXZWkKInhZ0lesP9zjCUvWaTrnouW8FnPxluJBc8EKsm1N7bLeYuUEsWPBbQotlfLOShj9XxtHzT7IrxoSet2u_F8EcjQUP2mYPiG5uoor5aQGEoC34bHJ2EA6MPBJgE86nIn97N_Ca2OOxYIXKOCGocVxgQM-52ZYojEM02PFW2XpwucZjm96ABswG3P5Ppmf6oX54a240pig4DgpvtbLTzcj6oaR4_jLQnG7izquK8Px649tJ-Pe-IY7w"} }'
#       - name: Outputs fetch-api-data
#         run: |
#           echo ${{ env.fetch-api-data }}
      - name: Build Image
        uses: docker/build-push-action@v2
        id: build
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com/argonaut/test-service:${{ steps.get_sha.outputs.SHA_SHORT }}
          secret-files: |
            "MY_SECRET_FILE=./fetch-api-data-action/data.json"
          outputs: type=docker,dest=image.tar
      - name: Push to ecr
        uses: argonautdev/aws-ecr-action@v4.1
        id: push_to_ecr
        with:
          access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          account_id: ${{ secrets.AWS_ACCOUNT_ID }}
          repo: argonaut/test-service
          region: us-east-2
          tags: ${{ steps.get_sha.outputs.SHA_SHORT }}
          create_repo: true
          image_scanning_configuration: true
          docker_image_path: image.tar

  deploy:
    env:
      ART_FRONTEGG_SERVER: argonaut-pp.frontegg.com
      ART_MIDGARD_SERVER: midgard.pp.argonaut.live
    
    environment: 
      name: dev 
    
    runs-on: ubuntu-latest
    name: Deploy to Argonaut
    needs: build
    steps:
      - name: Fetch repo
        uses: actions/checkout@v2
      - name: Fetch branch name
        shell: bash
        run: echo ::set-output name=BRANCH_NAME::${GITHUB_REF#refs/heads/}
        id: get_branch_name
      - name: Get Short SHA
        id: get_sha
        run: echo ::set-output name=SHA_SHORT::$(git rev-parse --short HEAD)
      - name: Download art
        run: curl --silent https://github.com/argonautdev/public/releases/download/v0.6.3-alpha.4/art-linux -L -o art
      - name: Configure art
        run: |
          chmod +x ./art
          sudo mv ./art /usr/local/bin/art
          art configure --key ${{ secrets.ART_KEY }} --secret ${{ secrets.ART_SECRET }}
          art app deploy -f .art/argonaut-dev-test-service.yaml --set image="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-2.amazonaws.com/argonaut/test-service" --set 'labels.argonaut\.dev/git-provider'='github' --set  argonaut.git-provider='github' --set  imageTag="${{ steps.get_sha.outputs.SHA_SHORT }}"  --set appName="test-service"  --set argonaut.env="dev"  --set argonaut.region="us-east-2"  --set argonaut.cluster="dev"  --set argonaut.serviceType="stateless"  --set argonaut.imageRegistry="ecr" 

